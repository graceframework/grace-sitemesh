buildscript {
	repositories {
		// mavenLocal()
		mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
	}
	dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.3.0"
	}
}

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY')
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : ("${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg")
ext.isReleaseVersion = !projectVersion.endsWith("SNAPSHOT")

group 'org.graceframework'
version projectVersion

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "java-library"
apply plugin: "io.github.gradle-nexus.publish-plugin"
apply plugin: "maven-publish"
apply plugin: "signing"

repositories {
    // mavenLocal()
    mavenCentral()
}

dependencies {
    compileOnly "jakarta.servlet:jakarta.servlet-api:6.0.0"
    compileOnly "jakarta.servlet.jsp:jakarta.servlet.jsp-api:3.1.0"
}

project.tasks.withType(Jar) {
    configure {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    failOnError = false
    exclude '**/Lexer.java'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            from components.java

            pom {
                name = "SiteMesh 2.4.x"
                description = "Jakarta version for SiteMesh 2.4.x"
                url = 'https://github.com/graceframework/grace-sitemesh'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'rainboyan'
                        name = 'Michael Yan'
                        email = 'rain@rainboyan.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/graceframework/grace-sitemesh.git'
                    developerConnection = 'scm:git:ssh://github.com:graceframework/grace-sitemesh.git'
                    url = 'https://github.com/graceframework/grace-sitemesh'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}
